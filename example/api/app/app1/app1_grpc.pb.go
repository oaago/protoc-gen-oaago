// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: contract/app/app1.proto

package app1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CccDddClient is the client API for CccDdd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CccDddClient interface {
	// 描述该方法的功能
	ApiCccDddService(ctx context.Context, in *CccDddRequest, opts ...grpc.CallOption) (*CccDddReply, error)
}

type cccDddClient struct {
	cc grpc.ClientConnInterface
}

func NewCccDddClient(cc grpc.ClientConnInterface) CccDddClient {
	return &cccDddClient{cc}
}

func (c *cccDddClient) ApiCccDddService(ctx context.Context, in *CccDddRequest, opts ...grpc.CallOption) (*CccDddReply, error) {
	out := new(CccDddReply)
	err := c.cc.Invoke(ctx, "/app.app1.CccDdd/ApiCccDddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CccDddServer is the server API for CccDdd service.
// All implementations must embed UnimplementedCccDddServer
// for forward compatibility
type CccDddServer interface {
	// 描述该方法的功能
	ApiCccDddService(context.Context, *CccDddRequest) (*CccDddReply, error)
	mustEmbedUnimplementedCccDddServer()
}

// UnimplementedCccDddServer must be embedded to have forward compatible implementations.
type UnimplementedCccDddServer struct {
}

func (UnimplementedCccDddServer) ApiCccDddService(context.Context, *CccDddRequest) (*CccDddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiCccDddService not implemented")
}
func (UnimplementedCccDddServer) mustEmbedUnimplementedCccDddServer() {}

// UnsafeCccDddServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CccDddServer will
// result in compilation errors.
type UnsafeCccDddServer interface {
	mustEmbedUnimplementedCccDddServer()
}

func RegisterCccDddServer(s grpc.ServiceRegistrar, srv CccDddServer) {
	s.RegisterService(&CccDdd_ServiceDesc, srv)
}

func _CccDdd_ApiCccDddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CccDddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CccDddServer).ApiCccDddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.app1.CccDdd/ApiCccDddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CccDddServer).ApiCccDddService(ctx, req.(*CccDddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CccDdd_ServiceDesc is the grpc.ServiceDesc for CccDdd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CccDdd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.app1.CccDdd",
	HandlerType: (*CccDddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiCccDddService",
			Handler:    _CccDdd_ApiCccDddService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/app/app1.proto",
}
